<?php

//----------------------------------------------------------------------------------------
function get($url, $user_agent='', $content_type = '')
{	
	$data = null;

	$opts = array(
	  CURLOPT_URL =>$url,
	  CURLOPT_FOLLOWLOCATION => TRUE,
	  CURLOPT_RETURNTRANSFER => TRUE,
	  
		CURLOPT_SSL_VERIFYHOST=> FALSE,
		CURLOPT_SSL_VERIFYPEER=> FALSE,
	  
	);

	if ($content_type != '')
	{
		
		$opts[CURLOPT_HTTPHEADER] = array(
			"Accept: " . $content_type, 
			"User-agent: Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405" 
		);
		
	}
	
	$ch = curl_init();
	curl_setopt_array($ch, $opts);
	$data = curl_exec($ch);
	$info = curl_getinfo($ch); 
		
	curl_close($ch);
	
	return $data;
}

//----------------------------------------------------------------------------------------
// Does wikidata have this DOI?
function wikidata_funder($id)
{
	$item = new stdclass;
	
	$sparql = 'SELECT * WHERE { ?item wdt:P3153 "' . $id . '" . OPTIONAL { ?item rdfs:label ?label . FILTER(LANG(?label)="en") } OPTIONAL { ?item wdt:P17 ?country . ?country wdt:P297 ?code . } }';
	
	//echo $sparql . "\n";
	
	$url = 'https://query.wikidata.org/bigdata/namespace/wdq/sparql?query=' . urlencode($sparql);
	$json = get($url, '', 'application/json');
	
	//echo $json;
			
	if ($json != '')
	{
		$obj = json_decode($json);
		
		if (isset($obj->results->bindings[0]))
		{
		
			foreach ($obj->results->bindings[0] as $k => $v)
			{
				// print_r($v);
				switch ($k)
				{
					case 'item':
						$item->wikidata =  preg_replace('/https?:\/\/www.wikidata.org\/entity\//', '', $v->value);
						break;

					case 'code':
						$item->country_code =  $v->value;
						break;

					case 'label':
						$item->name =  $v->value;
						break;
					
					default:
						break;
			
				}
			}
		}
	}
	
	return $item;
}



//----------------------------------------------------------------------------------------

$dois = array(
"10.13039/501100001870",
"10.13039/501100000781",
"10.13039/501100014434",
"10.13039/501100004543",
"10.13039/501100001809",
"10.13039/100000199",
"10.13039/100000001",
"10.13039/501100000270",
"10.13039/501100000288",
"10.13039/100009470",
"10.13039/100010229",
"10.13039/100005835",
"10.13039/100011084",
"10.13039/100010950",
"10.13039/100006959",
"10.13039/501100003977",
"10.13039/501100001736",
"10.13039/501100002341",
"10.13039/100000202",
"10.13039/100000009",
"10.13039/501100004960",
"10.13039/501100000038",
"10.13039/501100003593",
"10.13039/501100001807",
"10.13039/501100003074",
"10.13039/100006363",
"10.13039/100006069",
"10.13039/100008263",
"10.13039/501100001659",
"10.13039/501100006390",
"10.13039/501100001711",
"10.13039/501100003032",
"10.13039/501100011672",
"10.13039/501100005357",
"10.13039/100010338",
"10.13039/501100012166",
"10.13039/501100002510",
"10.13039/501100002507",
"10.13039/501100002322",
"10.13039/501100001655",
"10.13039/100005230",
"10.13039/100000076",
"10.13039/100009754",
"10.13039/100010948",
"10.13039/501100002661",
"10.13039/501100002923",
"10.13039/501100003967",
"10.13039/501100003968",
"10.13039/100000155",
"10.13039/100000200",
"10.13039/100009736",
"10.13039/501100008982",
"10.13039/501100003329",
"10.13039/100012540",
"10.13039/100006445",
"10.13039/501100005645",
"10.13039/501100002402",
"10.13039/501100004299",
"10.13039/501100010654",
"10.13039/100013724",
"10.13039/501100001421",
"10.13039/501100006668",
"10.13039/501100001663",
"10.13039/501100004731",
"10.13039/100008725",
"10.13039/501100000268",
"10.13039/100015846",
"10.13039/501100001293",
"10.13039/501100004630",
"10.13039/501100003246",
"10.13039/100010665",
"10.13039/501100003070",
"10.13039/501100008530",
"10.13039/100000870",
"10.13039/100005997",
"10.13039/501100001700",
"10.13039/501100003562",
"10.13039/501100005273",
"10.13039/501100003093",
"10.13039/501100004386",
"10.13039/100009472",
"10.13039/501100002858",
"10.13039/100008968",
"10.13039/501100001691",
"10.13039/501100003141",
"10.13039/501100006120",
"10.13039/501100000780",
"10.13039/501100004837",
"10.13039/501100011698",
"10.13039/501100005992",
"10.13039/100000097",
"10.13039/100006545",
"10.13039/501100007329",
"10.13039/100000014",
"10.13039/501100003725",
"10.13039/100011349",
"10.13039/100000002",
"10.13039/100008375",
"10.13039/501100002367",
"10.13039/501100004739",
"10.13039/501100002261",
"10.13039/501100006769",
"10.13039/100017177",
"10.13039/501100004049",
"10.13039/501100006181",
"10.13039/501100008331",
"10.13039/501100000782",
"10.13039/501100004895",
"10.13039/501100004410",
"10.13039/501100005883",
"10.13039/501100005739",
"10.13039/501100004829",
"10.13039/501100011239",
"10.13039/100007270",
"10.13039/100010842",
"10.13039/501100002850",
"10.13039/501100009568",
"10.13039/501100004396",
"10.13039/100010238",
"10.13039/100007121",
"10.13039/100007162",
"10.13039/501100009985",
"10.13039/501100004586",
"10.13039/100008091",
"10.13039/100013521",
"10.13039/501100001409",
"10.13039/501100004901",
"10.13039/501100005288",
"10.13039/100004900",
"10.13039/501100001321",
"10.13039/501100005046",
"10.13039/501100007063",
"10.13039/100010629",
"10.13039/501100003407",
"10.13039/501100001871",
"10.13039/501100005363",
"10.13039/501100007482",
"10.13039/100002861",
"10.13039/100001461",
"10.13039/501100001109",
"10.13039/501100000995",
"10.13039/501100000923",
"10.13039/100008562",
"10.13039/100015376",
"10.13039/100000873",
"10.13039/501100002347",
"10.13039/100001328",
"10.13039/100007149",
"10.13039/501100004281",
"10.13039/100008076",
"10.13039/501100003339",
"10.13039/501100002924",
"10.13039/100009829",
"10.13039/100005166",
"10.13039/100007147",
"10.13039/501100001824",
"10.13039/501100007522",
"10.13039/501100006488",
"10.13039/501100005711",
"10.13039/501100008127",
"10.13039/501100003549",
"10.13039/501100003825",
"10.13039/501100004794",
"10.13039/100012454",
"10.13039/100008367",
"10.13039/501100004240",
"10.13039/501100007061",
"10.13039/100000153",
"10.13039/100007108",
"10.13039/501100004663",
"10.13039/100009198",
"10.13039/100012025",
"10.13039/100012693",
"10.13039/501100005359",
"10.13039/501100004117",
"10.13039/100008887",
"10.13039/501100003130",
"10.13039/501100005737",
"10.13039/100008343",
"10.13039/100007463",
"10.13039/100008570",
"10.13039/100006978",
"10.13039/501100013494",
"10.13039/501100001037",
"10.13039/100000008",
"10.13039/501100004916",
"10.13039/501100001665",
);

$count = 1;

foreach ($dois as $doi)
{
	$id = str_replace('10.13039/', '', $doi);
	
	// echo $id . "\n";
	
	$item = wikidata_funder($id);
	
	// print_r($item);
	
	$kv = array();
	
	$kv[] = array('doi', $doi);

	// kv
	
	
	// print_r($kv);
	
	
	$keys = array();
	$values = array();
	
	$row = array();
	$row[] = $doi;
	
	if (isset($item->wikidata))
	{
		$kv[] = array('wikidata', $item->wikidata);
	}
	
	if (isset($item->country_code))
	{
		$kv[] = array('country', $item->country_code);
	}

	if (isset($item->name))
	{
		$kv[] = array('name', $item->name);
	}

	foreach ($kv as $pair)
	{
		$keys = array('id', 'k', 'v');
		$values = array('"' . strtolower($doi) . '"', '"' . $pair[0] . '"', '"' . $pair[1] . '"');
	
		echo 'INSERT OR IGNORE INTO kv(' . join(",", $keys) . ') VALUES (' . join(",", $values) . ');' . "\n";
	
	}	

	// Give server a break every 10 items
	if (($count++ % 5) == 0)
	{
		$rand = rand(1000000, 3000000);
		echo "\n-- ...sleeping for " . round(($rand / 1000000),2) . ' seconds' . "\n\n";
		usleep($rand);
	}

}

?>

